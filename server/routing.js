import base from '../src/base/'
import { env } from 'base'
import path from 'path'
import fs from 'fs'
import createRenderer from './lib/renderer'
import setupDevServer from '../webpack/setup-dev-server'

export default function applyServerRouting (app) {
  const resolve = file => path.resolve(__dirname, file)
  const templatePath = resolve('./templates/template.html')

  let renderer
  let readyPromise

  if (env === 'production') {
    // In production: create server renderer using template and built server bundle.
    // The server bundle is generated by vue-ssr-webpack-plugin.
    const template = fs.readFileSync(templatePath, 'utf-8')
    const bundle = require('../dist/vue-ssr-server-bundle.json')
    // The client manifests are optional, but it allows the renderer
    // to automatically infer preload/prefetch links and directly add <script>
    // tags for any async chunks used during render, avoiding waterfall requests.
    const clientManifest = require('../dist/vue-ssr-client-manifest.json')
    renderer = createRenderer(bundle, {
      template,
      clientManifest
    })
  } else {
    // In development: setup the dev server with watch and hot-reload,
    // and create a new renderer on bundle / index template update.
    readyPromise = setupDevServer(
      app,
      templatePath,
      (bundle, options) => {
        renderer = createRenderer(bundle, options)
      }
    )
  }

  function render (req, res) {
    const serverInfo =
    `express/${require('express/package.json').version} ` +
    `vue-server-renderer/${require('vue-server-renderer/package.json').version}`

    const s = Date.now()

    res.setHeader('Content-Type', 'text/html')
    res.setHeader('Server', serverInfo)

    const handleError = err => {
      if (err.url) {
        res.redirect(err.url)
      } else if (err.code === 404) {
        res.status(404).send('404 | Page Not Found')
      } else {
        // Render Error Page or Redirect
        res.status(500).send('500 | Internal Server Error')
        console.error(`error during render : ${req.url}`)
        console.error(err.stack)
      }
    }

    const context = {
      title: 'Vue Base', // default title
      url: req.url
    }

    renderer.renderToString(context, (err, html) => {
      if (err) {
        return handleError(err)
      }
      res.send(html)
      if (env === 'development') {
        console.log(`whole request: ${Date.now() - s}ms`)
      }
    })
  }

  app.get('*', env === 'production' ? render : (req, res) => {
    readyPromise.then(() => render(req, res))
  })
  base.console.success(`Routing up`)
}
